<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="CacheWolf" default="release">

	<!--
		This is the ant (http://ant.apache.org/) build file for CacheWolf
		
		Arguments:
			-Dbuild.version=integer
					source code version covered by the build. of "official" builds this shoul be the
					svn revision number
					Default: todays date (YYYYMMDD)
			
			-Dbuild.type=interger
					see src/CacheWolf/Version.kava VERSION_TYPES for valid values
					Default: 3 (InDevelopmentNewest)
			
			-Dbuild.cab=true
					also build a cab version from the PPC2003 zip file. 
					Default: do not build it
					make sure to check the prerequisites on http://ant.apache.org/manual/OptionalTasks/cab.html
					
		futher information about ant can be found at
			http://ant.apache.org/manual/
			http://help.eclipse.org/help33/topic/org.eclipse.platform.doc.user/gettingStarted/qs-81_basics.htm
			or check one of the many ant tutorials on the web
	-->

	<!-- TODO: find out how to get svn revision information platform independent. -->
	<!-- TODO: especially since svnversion would give better information if current directory is up to date -->
	<!-- set a default build.version as long as not defined otherwiese on command line -->
	<tstamp>
		<format property="build.version" pattern="yyyyMMdd" />
	</tstamp>
	<!-- set build type to experimental as long as not defined otherwiese on command line -->
	<property name="build.type" value="3" />

	<!-- define output directorties -->
	<property name="classes.dir" value="bin" />
	<property name="assemble.dir" value="assemble" />
	<property name="dist.dir" value="dist" />
	<property name="work.dir" value="work" />

	<!-- lists of files to be packaged, this should become less confusing later on -->
	<property name="template.files" value="templates/*.tpl" />
	<property name="icons.gui.files" value="dnf.gif,bug.gif,red.png,yellow.png,blue.png" />
	<property name="icons.log.files" value="traffic_cone.gif,recommendedlog.gif,icon_smile.gif,icon_sad.gif,icon_rsvp.gif,icon_note.gif,icon_needsmaint.gif,icon_maint.gif,icon_enabled.gif,icon_disabled.gif,icon_camera.gif,icon_attended.gif,big_smile.gif,coord_update.gif,icon_greenlight.gif,icon_redlight.gif,icon_remove.gif" />
	<property name="icons.cache.files" value="11.gif,8.gif,6.gif,5.gif,4.gif,3.gif,2.gif,13.gif,12.gif,100.gif,101.gif,102.gif,103.gif,104.gif" />
	<property name="icons.browser.files" value="g.png,g2.png,y.png,y2.png" />
	<property name="doc.files" value="wolflang.html,GCTemplate.html,info.html,legende.html" />

	<property name="verbose.mode" value="false" />



	<target name="find_revision" description="Sets property 'revision.number' to the head svn revision">
		<exec executable="svn" outputproperty="revision.number">
			<arg line="info http://cachehound.googlecode.com/svn/trunk/ -r HEAD" />
			<redirector>
				<outputfilterchain>
					<linecontainsregexp>
						<regexp pattern='^Revision' />
					</linecontainsregexp>
					<tokenfilter>
						<replaceregex pattern='[\D]+([\d]+)' replace="\1" />
					</tokenfilter>
				</outputfilterchain>
			</redirector>
		</exec>
		<echo>Revision found: ${revision.number}</echo>
	</target>



	<!--	<target name="fixreleasenumber" description="fix the release number in " depends="clean">
		<echo message="setting build version: ${build.version}" />
		<replaceregexp file="src/CacheWolf/Version.java" match="static final int SVN_REVISION = (.*);" replace="static final int SVN_REVISION = ${build.version};" />
		<echo message="setting build type: ${build.type}" />
		<replaceregexp file="src/CacheWolf/Version.java" match="static final int VERSION_TYPE = (.*);" replace="static final int VERSION_TYPE = ${build.type};" />
	</target>
-->

	<target name="release" depends="compile, find_revision" description="package all platforms">
		<mkdir dir="${assemble.dir}" />
		<mkdir dir="dist" />

		<jar jarfile="${assemble.dir}/CacheHound.jar" basedir="${classes.dir}" />
		<jar jarfile="${assemble.dir}/someClasses.jar" basedir="lib" includes="com/**,ewesoft/**,HTML/**" />

		<copy file="lib/java_ewe.dll" todir="${assemble.dir}" />
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="lib" includes="*.jar" />
		</copy>
		<copy file="docs/cachewolf.svg" todir="${assemble.dir}" />

		<antcall target="copyres" />
		<antcall target="create_test_directory" />

		<zip destfile="dist/CacheHound-${revision.number}.zip" basedir="${assemble.dir}" />
		<delete dir="${assemble.dir}" />
	</target>

	<target name="clean_work" description="cleans up the work directory build">
		<delete>
			<fileset dir="${work.dir}" includes="*,**/*" excludes="pref.xml,garminmap.xml" />
			<dirset dir="${work.dir}" />
		</delete>
	</target>

		
	<target name="clean" depends="clean_work" description="clean up before build">
		<delete dir="${pkg.dir}" />
		<delete dir="${classes.dir}" />
		<delete dir="programs/CacheWolf" />
	</target>

	<target name="create_test_directory" description="creates a directory for testing">
		<mkdir dir="${work.dir}" />
		<antcall target="clean_work" />
		<copy todir="${work.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="${assemble.dir}" />
		</copy>
	</target>

	<target name="compile" description="compile sources with java">
		<mkdir dir="${classes.dir}" />
		<javac encoding="utf8" classpath="./lib/CompileEwe.zip:./lib/:./lib/mail.jar" destdir="${classes.dir}" deprecation="off" nowarn="on" srcdir="src" includes="**/*.java" />
	</target>

	<target name="copyres" description="copy images to the assembly directory">
		<!-- copy start scripts -->
		<copy todir="${assemble.dir}" failonerror="true">
			<fileset dir="resources/scripts" includes="cachehound.*" />
		</copy>

		<!-- copy templates -->
		<copy todir="${assemble.dir}" failonerror="true">
			<fileset dir="res_noewe">
				<include name="${template.files}" />
			</fileset>
		</copy>
		<!-- copy gui icons -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe" includes="${icons.gui.files}" />
		</copy>
		<!-- copy browser icons -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe" includes="${icons.browser.files}" />
		</copy>
		<!-- copy cache icons -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe" includes="${icons.cache.files}" />
		</copy>
		<!-- copy log icons -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe" includes="${icons.log.files}" />
		</copy>
		<!-- copy webmapservices -->
		<copy todir="${assemble.dir}/webmapservices" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe/webmapservices" />
		</copy>
		<!-- copy languages -->
		<copy todir="${assemble.dir}/languages" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe/languages" />
		</copy>
		<!-- copy attributes -->
		<copy todir="${assemble.dir}/attributes" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="resources/attributes" />
		</copy>

		<!-- copy exporticons -->
		<copy todir="${assemble.dir}/exporticons" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe/exporticons" />
		</copy>
		<!-- copy logo -->
		<copy todir="${assemble.dir}" file="resources/CacheWolf.ico" failonerror="true" verbose="${verbose.mode}" />
		<!-- copy documentation -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="res_noewe" includes="${doc.files}" />
		</copy>
		<!-- spider.def -->
		<copy todir="${assemble.dir}" file="res_noewe/spider.def" failonerror="true" verbose="${verbose.mode}" />
		<!-- copy files in resources -->
		<copy todir="${assemble.dir}" failonerror="true" verbose="${verbose.mode}">
			<fileset dir="resources" includes="*.png,*.gif" />
		</copy>

	</target>

</project>
